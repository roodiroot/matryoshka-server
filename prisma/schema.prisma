// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String?
  provider  Provider?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  roles     Role[]
  Token     Token[]
  isBlocked Boolean   @default(false) @map("is_blocked")

  @@map("users")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Author {
  id       Int         @id @default(autoincrement())
  name     String
  surname  String?
  img      String
  jobTitle String      @map("job_title")
  article  Article[]
  review   Review[]
  type     AuthorRole?

  @@map("authors")
}

model Article {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  title       String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  text        String
  author      Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int      @map("author_id")

  @@map("articles")
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  teme        String
  title       String
  description String
  img         String
  article     String
  review      Review?
  stack       String[]
  infoProject InfoProject[]
  achieved    Achieved[]

  @@map("projects")
}

model InfoProject {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int      @map("project_id")

  @@map("list_info_projects")
}

model Review {
  id        Int     @id @default(autoincrement())
  text      String
  author    Author  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int     @map("author_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int     @unique @map("project_id")

  @@map("reviews")
}

model Achieved {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int     @map("project_id")

  @@map("achieveds")
}

enum Role {
  ADMIN
  USER
}

enum AuthorRole {
  TEAM
  CLIENT
}

enum Provider {
  GOOGLE
  YANDEX
}
